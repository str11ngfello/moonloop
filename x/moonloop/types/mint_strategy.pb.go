// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moonloop/mint_strategy.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MintStrategy struct {
	Index          string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Minters        []string `protobuf:"bytes,2,rep,name=minters,proto3" json:"minters,omitempty"`
	InstanceLevels []int32  `protobuf:"varint,3,rep,packed,name=instanceLevels,proto3" json:"instanceLevels,omitempty"`
	PriceLevels    []int32  `protobuf:"varint,4,rep,packed,name=priceLevels,proto3" json:"priceLevels,omitempty"`
	Paused         bool     `protobuf:"varint,5,opt,name=paused,proto3" json:"paused,omitempty"`
	Creator        string   `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MintStrategy) Reset()         { *m = MintStrategy{} }
func (m *MintStrategy) String() string { return proto.CompactTextString(m) }
func (*MintStrategy) ProtoMessage()    {}
func (*MintStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e92030f89c45b3a, []int{0}
}
func (m *MintStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintStrategy.Merge(m, src)
}
func (m *MintStrategy) XXX_Size() int {
	return m.Size()
}
func (m *MintStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_MintStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_MintStrategy proto.InternalMessageInfo

func (m *MintStrategy) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *MintStrategy) GetMinters() []string {
	if m != nil {
		return m.Minters
	}
	return nil
}

func (m *MintStrategy) GetInstanceLevels() []int32 {
	if m != nil {
		return m.InstanceLevels
	}
	return nil
}

func (m *MintStrategy) GetPriceLevels() []int32 {
	if m != nil {
		return m.PriceLevels
	}
	return nil
}

func (m *MintStrategy) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *MintStrategy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*MintStrategy)(nil), "str11ngfello.moonloop.moonloop.MintStrategy")
}

func init() { proto.RegisterFile("moonloop/mint_strategy.proto", fileDescriptor_6e92030f89c45b3a) }

var fileDescriptor_6e92030f89c45b3a = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc9, 0xcd, 0xcf, 0xcf,
	0xcb, 0xc9, 0xcf, 0x2f, 0xd0, 0xcf, 0xcd, 0xcc, 0x2b, 0x89, 0x2f, 0x2e, 0x29, 0x4a, 0x2c, 0x49,
	0x4d, 0xaf, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x2b, 0x2e, 0x29, 0x32, 0x34, 0xcc,
	0x4b, 0x4f, 0x4b, 0xcd, 0xc9, 0xc9, 0xd7, 0x83, 0x29, 0x85, 0x33, 0x94, 0x76, 0x31, 0x72, 0xf1,
	0xf8, 0x66, 0xe6, 0x95, 0x04, 0x43, 0xb5, 0x09, 0x89, 0x70, 0xb1, 0x66, 0xe6, 0xa5, 0xa4, 0x56,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x42, 0x12, 0x5c, 0xec, 0x20, 0xd3, 0x53,
	0x8b, 0x8a, 0x25, 0x98, 0x14, 0x98, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x35, 0x2e, 0xbe, 0xcc,
	0xbc, 0xe2, 0x92, 0xc4, 0xbc, 0xe4, 0x54, 0x9f, 0xd4, 0xb2, 0xd4, 0x9c, 0x62, 0x09, 0x66, 0x05,
	0x66, 0x0d, 0xd6, 0x20, 0x34, 0x51, 0x21, 0x05, 0x2e, 0xee, 0x82, 0xa2, 0x4c, 0xb8, 0x22, 0x16,
	0xb0, 0x22, 0x64, 0x21, 0x21, 0x31, 0x2e, 0xb6, 0x82, 0xc4, 0xd2, 0xe2, 0xd4, 0x14, 0x09, 0x56,
	0x05, 0x46, 0x0d, 0x8e, 0x20, 0x28, 0x0f, 0x64, 0x77, 0x72, 0x51, 0x6a, 0x62, 0x49, 0x7e, 0x91,
	0x04, 0x1b, 0xd8, 0x4d, 0x30, 0xae, 0x93, 0xf7, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb,
	0x31, 0x44, 0x19, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x23, 0x87,
	0x80, 0x3e, 0x3c, 0xb0, 0x2a, 0x10, 0xcc, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0x70, 0x80,
	0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x71, 0x14, 0x1a, 0x50, 0x01, 0x00, 0x00,
}

func (m *MintStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMintStrategy(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.PriceLevels) > 0 {
		dAtA2 := make([]byte, len(m.PriceLevels)*10)
		var j1 int
		for _, num1 := range m.PriceLevels {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMintStrategy(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InstanceLevels) > 0 {
		dAtA4 := make([]byte, len(m.InstanceLevels)*10)
		var j3 int
		for _, num1 := range m.InstanceLevels {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMintStrategy(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Minters) > 0 {
		for iNdEx := len(m.Minters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Minters[iNdEx])
			copy(dAtA[i:], m.Minters[iNdEx])
			i = encodeVarintMintStrategy(dAtA, i, uint64(len(m.Minters[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintMintStrategy(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMintStrategy(dAtA []byte, offset int, v uint64) int {
	offset -= sovMintStrategy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MintStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovMintStrategy(uint64(l))
	}
	if len(m.Minters) > 0 {
		for _, s := range m.Minters {
			l = len(s)
			n += 1 + l + sovMintStrategy(uint64(l))
		}
	}
	if len(m.InstanceLevels) > 0 {
		l = 0
		for _, e := range m.InstanceLevels {
			l += sovMintStrategy(uint64(e))
		}
		n += 1 + sovMintStrategy(uint64(l)) + l
	}
	if len(m.PriceLevels) > 0 {
		l = 0
		for _, e := range m.PriceLevels {
			l += sovMintStrategy(uint64(e))
		}
		n += 1 + sovMintStrategy(uint64(l)) + l
	}
	if m.Paused {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMintStrategy(uint64(l))
	}
	return n
}

func sovMintStrategy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMintStrategy(x uint64) (n int) {
	return sovMintStrategy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MintStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMintStrategy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMintStrategy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMintStrategy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMintStrategy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMintStrategy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minters = append(m.Minters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMintStrategy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InstanceLevels = append(m.InstanceLevels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMintStrategy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMintStrategy
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMintStrategy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.InstanceLevels) == 0 {
					m.InstanceLevels = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMintStrategy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InstanceLevels = append(m.InstanceLevels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceLevels", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMintStrategy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PriceLevels = append(m.PriceLevels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMintStrategy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMintStrategy
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMintStrategy
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PriceLevels) == 0 {
					m.PriceLevels = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMintStrategy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PriceLevels = append(m.PriceLevels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceLevels", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMintStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMintStrategy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMintStrategy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMintStrategy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMintStrategy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMintStrategy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMintStrategy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMintStrategy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMintStrategy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMintStrategy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMintStrategy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMintStrategy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMintStrategy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMintStrategy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMintStrategy = fmt.Errorf("proto: unexpected end of group")
)
