// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moonloop/contribution.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Contribution struct {
	CollectionIndex      string       `protobuf:"bytes,1,opt,name=collectionIndex,proto3" json:"collectionIndex,omitempty"`
	ClassIndex           string       `protobuf:"bytes,2,opt,name=classIndex,proto3" json:"classIndex,omitempty"`
	PowerupTemplateIndex string       `protobuf:"bytes,3,opt,name=powerupTemplateIndex,proto3" json:"powerupTemplateIndex,omitempty"`
	InstanceIndex        string       `protobuf:"bytes,4,opt,name=instanceIndex,proto3" json:"instanceIndex,omitempty"`
	Contributors         []string     `protobuf:"bytes,5,rep,name=contributors,proto3" json:"contributors,omitempty"`
	Amounts              []types.Coin `protobuf:"bytes,6,rep,name=amounts,proto3" json:"amounts"`
	Timestamps           []int64      `protobuf:"varint,7,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Creator              string       `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Contribution) Reset()         { *m = Contribution{} }
func (m *Contribution) String() string { return proto.CompactTextString(m) }
func (*Contribution) ProtoMessage()    {}
func (*Contribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6ecd50268f512a7, []int{0}
}
func (m *Contribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contribution.Merge(m, src)
}
func (m *Contribution) XXX_Size() int {
	return m.Size()
}
func (m *Contribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Contribution.DiscardUnknown(m)
}

var xxx_messageInfo_Contribution proto.InternalMessageInfo

func (m *Contribution) GetCollectionIndex() string {
	if m != nil {
		return m.CollectionIndex
	}
	return ""
}

func (m *Contribution) GetClassIndex() string {
	if m != nil {
		return m.ClassIndex
	}
	return ""
}

func (m *Contribution) GetPowerupTemplateIndex() string {
	if m != nil {
		return m.PowerupTemplateIndex
	}
	return ""
}

func (m *Contribution) GetInstanceIndex() string {
	if m != nil {
		return m.InstanceIndex
	}
	return ""
}

func (m *Contribution) GetContributors() []string {
	if m != nil {
		return m.Contributors
	}
	return nil
}

func (m *Contribution) GetAmounts() []types.Coin {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *Contribution) GetTimestamps() []int64 {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *Contribution) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Contribution)(nil), "str11ngfello.moonloop.moonloop.Contribution")
}

func init() { proto.RegisterFile("moonloop/contribution.proto", fileDescriptor_c6ecd50268f512a7) }

var fileDescriptor_c6ecd50268f512a7 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x18, 0xc4, 0x93, 0xa6, 0xb4, 0xd4, 0x14, 0x21, 0x59, 0x1d, 0x42, 0x91, 0x4c, 0x54, 0x31, 0x64,
	0x4a, 0x94, 0x32, 0xb1, 0xb6, 0x13, 0x62, 0x8b, 0x98, 0xd8, 0x1c, 0x63, 0x42, 0xa4, 0xc4, 0x9f,
	0x65, 0x3b, 0x50, 0xde, 0x82, 0xc7, 0xaa, 0xc4, 0xd2, 0x91, 0x09, 0xa1, 0xf6, 0x45, 0x50, 0x92,
	0xb6, 0xa4, 0x88, 0xed, 0xbe, 0xf3, 0xcf, 0xff, 0xee, 0xd0, 0x45, 0x01, 0x20, 0x72, 0x00, 0x19,
	0x32, 0x10, 0x46, 0x65, 0x49, 0x69, 0x32, 0x10, 0x81, 0x54, 0x60, 0x00, 0x13, 0x6d, 0x54, 0x14,
	0x89, 0xf4, 0x89, 0xe7, 0x39, 0x04, 0x3b, 0x72, 0x2f, 0xc6, 0xa3, 0x14, 0x52, 0xa8, 0xd1, 0xb0,
	0x52, 0xcd, 0xae, 0x31, 0x61, 0xa0, 0x0b, 0xd0, 0x61, 0x42, 0x35, 0x0f, 0x5f, 0xa2, 0x84, 0x1b,
	0x1a, 0x85, 0x0c, 0xb2, 0xed, 0xa9, 0x93, 0x8f, 0x0e, 0x1a, 0xce, 0x5b, 0x97, 0x61, 0x1f, 0x9d,
	0x31, 0xc8, 0x73, 0xce, 0xaa, 0xe9, 0x56, 0x3c, 0xf2, 0x85, 0x6b, 0x7b, 0xb6, 0x3f, 0x88, 0xff,
	0xda, 0x98, 0x20, 0xc4, 0x72, 0xaa, 0x75, 0x03, 0x75, 0x6a, 0xa8, 0xe5, 0xe0, 0x29, 0x1a, 0x49,
	0x78, 0xe5, 0xaa, 0x94, 0xf7, 0xbc, 0x90, 0x39, 0x35, 0xbc, 0x21, 0x9d, 0x9a, 0xfc, 0x77, 0x0d,
	0x5f, 0xa1, 0xd3, 0x4c, 0x68, 0x43, 0x05, 0xdb, 0xc2, 0xdd, 0x1a, 0x3e, 0x34, 0xf1, 0x04, 0x0d,
	0xf7, 0x01, 0x81, 0xd2, 0xee, 0x91, 0xe7, 0xf8, 0x83, 0xf8, 0xc0, 0xc3, 0x37, 0xa8, 0x4f, 0x0b,
	0x28, 0x85, 0xd1, 0x6e, 0xcf, 0x73, 0xfc, 0x93, 0xe9, 0x79, 0xd0, 0x44, 0x11, 0x54, 0x51, 0x04,
	0xdb, 0x28, 0x82, 0x39, 0x64, 0x62, 0xd6, 0x5d, 0x7e, 0x5d, 0x5a, 0xf1, 0x8e, 0xaf, 0x3e, 0x66,
	0xb2, 0x82, 0x6b, 0x43, 0x0b, 0xa9, 0xdd, 0xbe, 0xe7, 0xf8, 0x4e, 0xdc, 0x72, 0xb0, 0x8b, 0xfa,
	0x4c, 0x71, 0x6a, 0x40, 0xb9, 0xc7, 0xf5, 0xf3, 0x76, 0xe3, 0xec, 0x6e, 0xb9, 0x26, 0xf6, 0x6a,
	0x4d, 0xec, 0xef, 0x35, 0xb1, 0xdf, 0x37, 0xc4, 0x5a, 0x6d, 0x88, 0xf5, 0xb9, 0x21, 0xd6, 0x43,
	0x94, 0x66, 0xe6, 0xb9, 0x4c, 0x02, 0x06, 0x45, 0xd8, 0x2e, 0x32, 0xdc, 0x57, 0xbe, 0xf8, 0x95,
	0xe6, 0x4d, 0x72, 0x9d, 0xf4, 0xea, 0x86, 0xae, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x96,
	0xa7, 0x08, 0x16, 0x02, 0x00, 0x00,
}

func (m *Contribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintContribution(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Timestamps) > 0 {
		dAtA2 := make([]byte, len(m.Timestamps)*10)
		var j1 int
		for _, num1 := range m.Timestamps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintContribution(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContribution(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Contributors) > 0 {
		for iNdEx := len(m.Contributors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contributors[iNdEx])
			copy(dAtA[i:], m.Contributors[iNdEx])
			i = encodeVarintContribution(dAtA, i, uint64(len(m.Contributors[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InstanceIndex) > 0 {
		i -= len(m.InstanceIndex)
		copy(dAtA[i:], m.InstanceIndex)
		i = encodeVarintContribution(dAtA, i, uint64(len(m.InstanceIndex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PowerupTemplateIndex) > 0 {
		i -= len(m.PowerupTemplateIndex)
		copy(dAtA[i:], m.PowerupTemplateIndex)
		i = encodeVarintContribution(dAtA, i, uint64(len(m.PowerupTemplateIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassIndex) > 0 {
		i -= len(m.ClassIndex)
		copy(dAtA[i:], m.ClassIndex)
		i = encodeVarintContribution(dAtA, i, uint64(len(m.ClassIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionIndex) > 0 {
		i -= len(m.CollectionIndex)
		copy(dAtA[i:], m.CollectionIndex)
		i = encodeVarintContribution(dAtA, i, uint64(len(m.CollectionIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContribution(dAtA []byte, offset int, v uint64) int {
	offset -= sovContribution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Contribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionIndex)
	if l > 0 {
		n += 1 + l + sovContribution(uint64(l))
	}
	l = len(m.ClassIndex)
	if l > 0 {
		n += 1 + l + sovContribution(uint64(l))
	}
	l = len(m.PowerupTemplateIndex)
	if l > 0 {
		n += 1 + l + sovContribution(uint64(l))
	}
	l = len(m.InstanceIndex)
	if l > 0 {
		n += 1 + l + sovContribution(uint64(l))
	}
	if len(m.Contributors) > 0 {
		for _, s := range m.Contributors {
			l = len(s)
			n += 1 + l + sovContribution(uint64(l))
		}
	}
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovContribution(uint64(l))
		}
	}
	if len(m.Timestamps) > 0 {
		l = 0
		for _, e := range m.Timestamps {
			l += sovContribution(uint64(e))
		}
		n += 1 + sovContribution(uint64(l)) + l
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovContribution(uint64(l))
	}
	return n
}

func sovContribution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContribution(x uint64) (n int) {
	return sovContribution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerupTemplateIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerupTemplateIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contributors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contributors = append(m.Contributors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContribution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContribution
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Timestamps = append(m.Timestamps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContribution
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContribution
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthContribution
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Timestamps) == 0 {
					m.Timestamps = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContribution
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Timestamps = append(m.Timestamps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamps", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContribution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContribution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContribution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContribution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContribution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContribution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContribution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContribution = fmt.Errorf("proto: unexpected end of group")
)
