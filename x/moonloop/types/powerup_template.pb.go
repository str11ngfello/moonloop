// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moonloop/powerup_template.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PowerupTemplate struct {
	CollectionIndex      string     `protobuf:"bytes,1,opt,name=collectionIndex,proto3" json:"collectionIndex,omitempty"`
	ClassIndex           string     `protobuf:"bytes,2,opt,name=classIndex,proto3" json:"classIndex,omitempty"`
	PowerupTemplateIndex string     `protobuf:"bytes,3,opt,name=powerupTemplateIndex,proto3" json:"powerupTemplateIndex,omitempty"`
	Name                 string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description          string     `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Count                int32      `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	ActivationBalance    types.Coin `protobuf:"bytes,7,opt,name=activationBalance,proto3" json:"activationBalance"`
	MaxBalance           types.Coin `protobuf:"bytes,8,opt,name=maxBalance,proto3" json:"maxBalance"`
	Duration             int32      `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	MaxDuration          int32      `protobuf:"varint,10,opt,name=maxDuration,proto3" json:"maxDuration,omitempty"`
	RefundDuration       int32      `protobuf:"varint,11,opt,name=refundDuration,proto3" json:"refundDuration,omitempty"`
	MaxActivations       int32      `protobuf:"varint,12,opt,name=maxActivations,proto3" json:"maxActivations,omitempty"`
	CoolDownDuration     int32      `protobuf:"varint,13,opt,name=coolDownDuration,proto3" json:"coolDownDuration,omitempty"`
	RechargeRate         types.Coin `protobuf:"bytes,14,opt,name=rechargeRate,proto3" json:"rechargeRate"`
	FeeRate              types.Coin `protobuf:"bytes,15,opt,name=feeRate,proto3" json:"feeRate"`
	ActivationType       int32      `protobuf:"varint,16,opt,name=activationType,proto3" json:"activationType,omitempty"`
	EventData            string     `protobuf:"bytes,17,opt,name=eventData,proto3" json:"eventData,omitempty"`
	Creator              string     `protobuf:"bytes,18,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *PowerupTemplate) Reset()         { *m = PowerupTemplate{} }
func (m *PowerupTemplate) String() string { return proto.CompactTextString(m) }
func (*PowerupTemplate) ProtoMessage()    {}
func (*PowerupTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e20f32fa55d348c, []int{0}
}
func (m *PowerupTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerupTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerupTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PowerupTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerupTemplate.Merge(m, src)
}
func (m *PowerupTemplate) XXX_Size() int {
	return m.Size()
}
func (m *PowerupTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerupTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_PowerupTemplate proto.InternalMessageInfo

func (m *PowerupTemplate) GetCollectionIndex() string {
	if m != nil {
		return m.CollectionIndex
	}
	return ""
}

func (m *PowerupTemplate) GetClassIndex() string {
	if m != nil {
		return m.ClassIndex
	}
	return ""
}

func (m *PowerupTemplate) GetPowerupTemplateIndex() string {
	if m != nil {
		return m.PowerupTemplateIndex
	}
	return ""
}

func (m *PowerupTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PowerupTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PowerupTemplate) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PowerupTemplate) GetActivationBalance() types.Coin {
	if m != nil {
		return m.ActivationBalance
	}
	return types.Coin{}
}

func (m *PowerupTemplate) GetMaxBalance() types.Coin {
	if m != nil {
		return m.MaxBalance
	}
	return types.Coin{}
}

func (m *PowerupTemplate) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *PowerupTemplate) GetMaxDuration() int32 {
	if m != nil {
		return m.MaxDuration
	}
	return 0
}

func (m *PowerupTemplate) GetRefundDuration() int32 {
	if m != nil {
		return m.RefundDuration
	}
	return 0
}

func (m *PowerupTemplate) GetMaxActivations() int32 {
	if m != nil {
		return m.MaxActivations
	}
	return 0
}

func (m *PowerupTemplate) GetCoolDownDuration() int32 {
	if m != nil {
		return m.CoolDownDuration
	}
	return 0
}

func (m *PowerupTemplate) GetRechargeRate() types.Coin {
	if m != nil {
		return m.RechargeRate
	}
	return types.Coin{}
}

func (m *PowerupTemplate) GetFeeRate() types.Coin {
	if m != nil {
		return m.FeeRate
	}
	return types.Coin{}
}

func (m *PowerupTemplate) GetActivationType() int32 {
	if m != nil {
		return m.ActivationType
	}
	return 0
}

func (m *PowerupTemplate) GetEventData() string {
	if m != nil {
		return m.EventData
	}
	return ""
}

func (m *PowerupTemplate) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*PowerupTemplate)(nil), "str11ngfello.moonloop.moonloop.PowerupTemplate")
}

func init() { proto.RegisterFile("moonloop/powerup_template.proto", fileDescriptor_9e20f32fa55d348c) }

var fileDescriptor_9e20f32fa55d348c = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xbf, 0x6e, 0xdb, 0x30,
	0x10, 0xc6, 0xad, 0xd6, 0x7f, 0xe2, 0x73, 0x1a, 0x27, 0x84, 0x07, 0xd6, 0x28, 0x14, 0xa3, 0x43,
	0x61, 0x74, 0x90, 0xe0, 0x74, 0xea, 0x54, 0xd4, 0xf1, 0x52, 0x14, 0x05, 0x0a, 0x23, 0x53, 0x97,
	0x82, 0xa6, 0xcf, 0x8e, 0x00, 0x89, 0x27, 0x50, 0xb4, 0xe3, 0x3c, 0x40, 0xf7, 0x3e, 0x56, 0xc6,
	0x8c, 0x9d, 0x8a, 0xc2, 0x7e, 0x91, 0x42, 0x64, 0x2c, 0xcb, 0x49, 0x06, 0x6f, 0xc7, 0xef, 0xfb,
	0x7d, 0x47, 0x1e, 0x25, 0xc2, 0x79, 0x42, 0xa4, 0x62, 0xa2, 0x34, 0x4c, 0xe9, 0x06, 0xf5, 0x22,
	0xfd, 0x69, 0x30, 0x49, 0x63, 0x61, 0x30, 0x48, 0x35, 0x19, 0x62, 0x7e, 0x66, 0xf4, 0x60, 0xa0,
	0xe6, 0x33, 0x8c, 0x63, 0x0a, 0xb6, 0x74, 0x51, 0x74, 0x3b, 0x73, 0x9a, 0x93, 0x45, 0xc3, 0xbc,
	0x72, 0xa9, 0xae, 0x2f, 0x29, 0x4b, 0x28, 0x0b, 0x27, 0x22, 0xc3, 0x70, 0x39, 0x98, 0xa0, 0x11,
	0x83, 0x50, 0x52, 0xa4, 0x9c, 0xff, 0xf6, 0x57, 0x1d, 0xda, 0xdf, 0xdd, 0x86, 0x57, 0x0f, 0xfb,
	0xb1, 0x3e, 0xb4, 0x25, 0xc5, 0x31, 0x4a, 0x13, 0x91, 0xfa, 0xa2, 0xa6, 0xb8, 0xe2, 0x5e, 0xcf,
	0xeb, 0x37, 0xc7, 0x8f, 0x65, 0xe6, 0x03, 0xc8, 0x58, 0x64, 0x99, 0x83, 0x5e, 0x58, 0xa8, 0xa4,
	0xb0, 0x0b, 0xe8, 0xa4, 0xfb, 0xcd, 0x1d, 0xf9, 0xd2, 0x92, 0xcf, 0x7a, 0x8c, 0x41, 0x55, 0x89,
	0x04, 0x79, 0xd5, 0x32, 0xb6, 0x66, 0x3d, 0x68, 0x4d, 0x31, 0x93, 0x3a, 0x4a, 0xf3, 0xbd, 0x79,
	0xcd, 0x5a, 0x65, 0x89, 0x75, 0xa0, 0x26, 0x69, 0xa1, 0x0c, 0xaf, 0xf7, 0xbc, 0x7e, 0x6d, 0xec,
	0x16, 0xec, 0x1b, 0x9c, 0x09, 0x69, 0xa2, 0xa5, 0xc8, 0x99, 0xa1, 0x88, 0x85, 0x92, 0xc8, 0x1b,
	0x3d, 0xaf, 0xdf, 0xba, 0x78, 0x1d, 0xb8, 0x9b, 0x09, 0xf2, 0x9b, 0x09, 0x1e, 0x6e, 0x26, 0xb8,
	0xa4, 0x48, 0x0d, 0xab, 0x77, 0x7f, 0xcf, 0x2b, 0xe3, 0xa7, 0x49, 0xf6, 0x09, 0x20, 0x11, 0xab,
	0x6d, 0x9f, 0xa3, 0xc3, 0xfa, 0x94, 0x22, 0xac, 0x0b, 0x47, 0xd3, 0x85, 0xb6, 0x3d, 0x79, 0xd3,
	0x1e, 0xb4, 0x58, 0xe7, 0x33, 0x26, 0x62, 0x35, 0xda, 0xda, 0x60, 0xed, 0xb2, 0xc4, 0xde, 0xc1,
	0x89, 0xc6, 0xd9, 0x42, 0x4d, 0x0b, 0xa8, 0x65, 0xa1, 0x47, 0x6a, 0xce, 0x25, 0x62, 0xf5, 0xb9,
	0x38, 0x7e, 0xc6, 0x8f, 0x1d, 0xb7, 0xaf, 0xb2, 0xf7, 0x70, 0x2a, 0x89, 0xe2, 0x11, 0xdd, 0xa8,
	0xa2, 0xe3, 0x2b, 0x4b, 0x3e, 0xd1, 0xd9, 0x25, 0x1c, 0x6b, 0x94, 0xd7, 0x42, 0xcf, 0x71, 0x2c,
	0x0c, 0xf2, 0x93, 0xc3, 0x86, 0xdf, 0x0b, 0xb1, 0x8f, 0xd0, 0x98, 0xa1, 0xcb, 0xb7, 0x0f, 0xcb,
	0x6f, 0xf9, 0x7c, 0xa6, 0xdd, 0xf7, 0xb8, 0xba, 0x4d, 0x91, 0x9f, 0xba, 0x99, 0xf6, 0x55, 0xf6,
	0x06, 0x9a, 0xb8, 0x44, 0x65, 0x46, 0xc2, 0x08, 0x7e, 0x66, 0xff, 0x93, 0x9d, 0xc0, 0x38, 0x34,
	0xa4, 0x46, 0x61, 0x48, 0x73, 0x66, 0xbd, 0xed, 0x72, 0xf8, 0xf5, 0x6e, 0xed, 0x7b, 0xf7, 0x6b,
	0xdf, 0xfb, 0xb7, 0xf6, 0xbd, 0xdf, 0x1b, 0xbf, 0x72, 0xbf, 0xf1, 0x2b, 0x7f, 0x36, 0x7e, 0xe5,
	0xc7, 0x60, 0x1e, 0x99, 0xeb, 0xc5, 0x24, 0x90, 0x94, 0x84, 0xe5, 0x27, 0x18, 0x16, 0x0f, 0x76,
	0xb5, 0x2b, 0xcd, 0x6d, 0x8a, 0xd9, 0xa4, 0x6e, 0xdf, 0xd6, 0x87, 0xff, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x30, 0xf9, 0xa0, 0xaf, 0xd4, 0x03, 0x00, 0x00,
}

func (m *PowerupTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerupTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PowerupTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.EventData) > 0 {
		i -= len(m.EventData)
		copy(dAtA[i:], m.EventData)
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(len(m.EventData)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ActivationType != 0 {
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(m.ActivationType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size, err := m.FeeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.RechargeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.CoolDownDuration != 0 {
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(m.CoolDownDuration))
		i--
		dAtA[i] = 0x68
	}
	if m.MaxActivations != 0 {
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(m.MaxActivations))
		i--
		dAtA[i] = 0x60
	}
	if m.RefundDuration != 0 {
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(m.RefundDuration))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxDuration != 0 {
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(m.MaxDuration))
		i--
		dAtA[i] = 0x50
	}
	if m.Duration != 0 {
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.MaxBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.ActivationBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Count != 0 {
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PowerupTemplateIndex) > 0 {
		i -= len(m.PowerupTemplateIndex)
		copy(dAtA[i:], m.PowerupTemplateIndex)
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(len(m.PowerupTemplateIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassIndex) > 0 {
		i -= len(m.ClassIndex)
		copy(dAtA[i:], m.ClassIndex)
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(len(m.ClassIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionIndex) > 0 {
		i -= len(m.CollectionIndex)
		copy(dAtA[i:], m.CollectionIndex)
		i = encodeVarintPowerupTemplate(dAtA, i, uint64(len(m.CollectionIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPowerupTemplate(dAtA []byte, offset int, v uint64) int {
	offset -= sovPowerupTemplate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PowerupTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionIndex)
	if l > 0 {
		n += 1 + l + sovPowerupTemplate(uint64(l))
	}
	l = len(m.ClassIndex)
	if l > 0 {
		n += 1 + l + sovPowerupTemplate(uint64(l))
	}
	l = len(m.PowerupTemplateIndex)
	if l > 0 {
		n += 1 + l + sovPowerupTemplate(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPowerupTemplate(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPowerupTemplate(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovPowerupTemplate(uint64(m.Count))
	}
	l = m.ActivationBalance.Size()
	n += 1 + l + sovPowerupTemplate(uint64(l))
	l = m.MaxBalance.Size()
	n += 1 + l + sovPowerupTemplate(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovPowerupTemplate(uint64(m.Duration))
	}
	if m.MaxDuration != 0 {
		n += 1 + sovPowerupTemplate(uint64(m.MaxDuration))
	}
	if m.RefundDuration != 0 {
		n += 1 + sovPowerupTemplate(uint64(m.RefundDuration))
	}
	if m.MaxActivations != 0 {
		n += 1 + sovPowerupTemplate(uint64(m.MaxActivations))
	}
	if m.CoolDownDuration != 0 {
		n += 1 + sovPowerupTemplate(uint64(m.CoolDownDuration))
	}
	l = m.RechargeRate.Size()
	n += 1 + l + sovPowerupTemplate(uint64(l))
	l = m.FeeRate.Size()
	n += 1 + l + sovPowerupTemplate(uint64(l))
	if m.ActivationType != 0 {
		n += 2 + sovPowerupTemplate(uint64(m.ActivationType))
	}
	l = len(m.EventData)
	if l > 0 {
		n += 2 + l + sovPowerupTemplate(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovPowerupTemplate(uint64(l))
	}
	return n
}

func sovPowerupTemplate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPowerupTemplate(x uint64) (n int) {
	return sovPowerupTemplate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PowerupTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPowerupTemplate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerupTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerupTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerupTemplateIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerupTemplateIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActivationBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDuration", wireType)
			}
			m.MaxDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundDuration", wireType)
			}
			m.RefundDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxActivations", wireType)
			}
			m.MaxActivations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxActivations |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolDownDuration", wireType)
			}
			m.CoolDownDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoolDownDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RechargeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationType", wireType)
			}
			m.ActivationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPowerupTemplate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPowerupTemplate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPowerupTemplate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPowerupTemplate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPowerupTemplate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPowerupTemplate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPowerupTemplate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPowerupTemplate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPowerupTemplate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPowerupTemplate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPowerupTemplate = fmt.Errorf("proto: unexpected end of group")
)
