// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moonloop/class.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Class struct {
	CollectionIndex  string   `protobuf:"bytes,1,opt,name=collectionIndex,proto3" json:"collectionIndex,omitempty"`
	ClassIndex       string   `protobuf:"bytes,2,opt,name=classIndex,proto3" json:"classIndex,omitempty"`
	Name             string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MintStrategy     string   `protobuf:"bytes,5,opt,name=mintStrategy,proto3" json:"mintStrategy,omitempty"`
	GltfHash         string   `protobuf:"bytes,6,opt,name=gltfHash,proto3" json:"gltfHash,omitempty"`
	Metadata         string   `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MaxInstances     int32    `protobuf:"varint,8,opt,name=maxInstances,proto3" json:"maxInstances,omitempty"`
	Count            int32    `protobuf:"varint,9,opt,name=count,proto3" json:"count,omitempty"`
	PowerupTemplates []string `protobuf:"bytes,10,rep,name=powerupTemplates,proto3" json:"powerupTemplates,omitempty"`
	Creator          string   `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner            string   `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Class) Reset()         { *m = Class{} }
func (m *Class) String() string { return proto.CompactTextString(m) }
func (*Class) ProtoMessage()    {}
func (*Class) Descriptor() ([]byte, []int) {
	return fileDescriptor_b19fd057806c6083, []int{0}
}
func (m *Class) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Class) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Class.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Class) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Class.Merge(m, src)
}
func (m *Class) XXX_Size() int {
	return m.Size()
}
func (m *Class) XXX_DiscardUnknown() {
	xxx_messageInfo_Class.DiscardUnknown(m)
}

var xxx_messageInfo_Class proto.InternalMessageInfo

func (m *Class) GetCollectionIndex() string {
	if m != nil {
		return m.CollectionIndex
	}
	return ""
}

func (m *Class) GetClassIndex() string {
	if m != nil {
		return m.ClassIndex
	}
	return ""
}

func (m *Class) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Class) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Class) GetMintStrategy() string {
	if m != nil {
		return m.MintStrategy
	}
	return ""
}

func (m *Class) GetGltfHash() string {
	if m != nil {
		return m.GltfHash
	}
	return ""
}

func (m *Class) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Class) GetMaxInstances() int32 {
	if m != nil {
		return m.MaxInstances
	}
	return 0
}

func (m *Class) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Class) GetPowerupTemplates() []string {
	if m != nil {
		return m.PowerupTemplates
	}
	return nil
}

func (m *Class) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Class) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*Class)(nil), "cosmonaut.moonloop.moonloop.Class")
}

func init() { proto.RegisterFile("moonloop/class.proto", fileDescriptor_b19fd057806c6083) }

var fileDescriptor_b19fd057806c6083 = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbd, 0x6e, 0x22, 0x31,
	0x14, 0x85, 0x19, 0x60, 0xf8, 0x31, 0x48, 0xbb, 0xb2, 0x28, 0xac, 0x5d, 0xc9, 0x1a, 0x51, 0x8d,
	0xb6, 0x18, 0x8a, 0x7d, 0x83, 0xa4, 0x81, 0x96, 0xa4, 0x4a, 0x67, 0x8c, 0x03, 0x23, 0x8d, 0x7d,
	0x2d, 0xfb, 0x8e, 0x80, 0xb7, 0xc8, 0x63, 0xa5, 0xa4, 0x4c, 0x19, 0xc1, 0x53, 0xa4, 0x8b, 0xc6,
	0x23, 0x26, 0x90, 0x74, 0x3e, 0xdf, 0x77, 0x74, 0x64, 0xe9, 0x92, 0x89, 0x06, 0x30, 0x05, 0x80,
	0x9d, 0xc9, 0x42, 0x78, 0x9f, 0x59, 0x07, 0x08, 0xf4, 0xaf, 0x04, 0xaf, 0xc1, 0x88, 0x12, 0xb3,
	0x8b, 0x6f, 0x1e, 0xd3, 0x8f, 0x36, 0x89, 0xef, 0xab, 0x32, 0x4d, 0xc9, 0x2f, 0x09, 0x45, 0xa1,
	0x24, 0xe6, 0x60, 0x16, 0x66, 0xad, 0xf6, 0x2c, 0x4a, 0xa2, 0x74, 0xb8, 0xfc, 0x8e, 0x29, 0x27,
	0x24, 0xec, 0xd7, 0xa5, 0x76, 0x28, 0x5d, 0x11, 0x4a, 0x49, 0xd7, 0x08, 0xad, 0x58, 0x27, 0x98,
	0xf0, 0xa6, 0x09, 0x19, 0xad, 0x95, 0x97, 0x2e, 0xb7, 0xd5, 0x0e, 0xeb, 0x06, 0x75, 0x8d, 0xe8,
	0x94, 0x8c, 0x75, 0x6e, 0xf0, 0x01, 0x9d, 0x40, 0xb5, 0x39, 0xb0, 0x38, 0x54, 0x6e, 0x18, 0xfd,
	0x43, 0x06, 0x9b, 0x02, 0x9f, 0xe7, 0xc2, 0x6f, 0x59, 0x2f, 0xf8, 0x26, 0x57, 0x4e, 0x2b, 0x14,
	0x6b, 0x81, 0x82, 0xf5, 0x6b, 0x77, 0xc9, 0x61, 0x5b, 0xec, 0x17, 0xc6, 0xa3, 0x30, 0x52, 0x79,
	0x36, 0x48, 0xa2, 0x34, 0x5e, 0xde, 0x30, 0x3a, 0x21, 0xb1, 0x84, 0xd2, 0x20, 0x1b, 0x06, 0x59,
	0x07, 0xfa, 0x8f, 0xfc, 0xb6, 0xb0, 0x53, 0xae, 0xb4, 0x8f, 0x4a, 0xdb, 0x42, 0xa0, 0xf2, 0x8c,
	0x24, 0x9d, 0x74, 0xb8, 0xfc, 0xc1, 0x29, 0x23, 0x7d, 0xe9, 0x94, 0x40, 0x70, 0x6c, 0x14, 0x3e,
	0x70, 0x89, 0xd5, 0x36, 0xec, 0x8c, 0x72, 0x6c, 0x1c, 0x78, 0x1d, 0xee, 0xe6, 0xaf, 0x27, 0x1e,
	0x1d, 0x4f, 0x3c, 0x7a, 0x3f, 0xf1, 0xe8, 0xe5, 0xcc, 0x5b, 0xc7, 0x33, 0x6f, 0xbd, 0x9d, 0x79,
	0xeb, 0x29, 0xdb, 0xe4, 0xb8, 0x2d, 0x57, 0x99, 0x04, 0x3d, 0x6b, 0xae, 0x37, 0x6b, 0xae, 0xbb,
	0xff, 0x7a, 0xe2, 0xc1, 0x2a, 0xbf, 0xea, 0x85, 0x4b, 0xff, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff,
	0x80, 0xa8, 0xf3, 0x26, 0x01, 0x02, 0x00, 0x00,
}

func (m *Class) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Class) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Class) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PowerupTemplates) > 0 {
		for iNdEx := len(m.PowerupTemplates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PowerupTemplates[iNdEx])
			copy(dAtA[i:], m.PowerupTemplates[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.PowerupTemplates[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Count != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxInstances != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.MaxInstances))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GltfHash) > 0 {
		i -= len(m.GltfHash)
		copy(dAtA[i:], m.GltfHash)
		i = encodeVarintClass(dAtA, i, uint64(len(m.GltfHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MintStrategy) > 0 {
		i -= len(m.MintStrategy)
		copy(dAtA[i:], m.MintStrategy)
		i = encodeVarintClass(dAtA, i, uint64(len(m.MintStrategy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassIndex) > 0 {
		i -= len(m.ClassIndex)
		copy(dAtA[i:], m.ClassIndex)
		i = encodeVarintClass(dAtA, i, uint64(len(m.ClassIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionIndex) > 0 {
		i -= len(m.CollectionIndex)
		copy(dAtA[i:], m.CollectionIndex)
		i = encodeVarintClass(dAtA, i, uint64(len(m.CollectionIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClass(dAtA []byte, offset int, v uint64) int {
	offset -= sovClass(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Class) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionIndex)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.ClassIndex)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.MintStrategy)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.GltfHash)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.MaxInstances != 0 {
		n += 1 + sovClass(uint64(m.MaxInstances))
	}
	if m.Count != 0 {
		n += 1 + sovClass(uint64(m.Count))
	}
	if len(m.PowerupTemplates) > 0 {
		for _, s := range m.PowerupTemplates {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func sovClass(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClass(x uint64) (n int) {
	return sovClass(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Class) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Class: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Class: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GltfHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GltfHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstances", wireType)
			}
			m.MaxInstances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInstances |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerupTemplates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerupTemplates = append(m.PowerupTemplates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClass(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClass
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClass
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClass
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClass
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClass        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClass          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClass = fmt.Errorf("proto: unexpected end of group")
)
